@implements IDisposable
@using System.Text
@using Triangular.Web.Models
@inject Triangular.Web.StateService.StateGridService StateGridService

<HeadContent>
    <style>
        h2 {
            border-bottom: 1px solid #000000;
            margin-bottom: 10px;
            padding-bottom: 10px;
        }

        .leftTriangle {
            fill: yellow;
        }

        .rightTriangle {
            fill: violet;
        }

        .active {
            fill: green;
        }

        .leftTriangle:hover {
            fill: blue;
        }

        .rightTriangle:hover {
            fill: red;
        }
    </style>
</HeadContent>

<h3>Grid</h3>

<div>
    <div class="row">
        <div class="col-6">
            @if (StateGridService.Grid.IsGridVisable())
            {
                <div class="grid">
                    <h2>Select a Triangle</h2>
                    <svg class="board" style="width: @(((StateGridService.Grid.Width / 10) * 10) * scale)px; height: @(((StateGridService.Grid.Height / 10) * 10) * scale)px; cursor: pointer;">
                        @for (int i = 1; i <= StateGridService.Grid.GetRowCount(); i++)
                        {
                            @for (int j = 1; j <= StateGridService.Grid.GetColumnCount(); j++)
                            {
                                int row = i;
                                int column = j;

                                <polygon class="leftTriangle @(gridReference.Equals(GetReference(row, column * 2 - 1)) ? "active" : "")"
                             points="@GetPoints(row, column, "left")"
                             @onclick="@(() => GetTriangleCoordinates(row, column * 2 - 1))"
                             @onclick:stopPropagation="stopPropagation">
                                    <title>@GetReference(row, column * 2 - 1)</title>
                                </polygon>
                                <polygon class="rightTriangle @(gridReference.Equals(GetReference(row, column * 2)) ? "active" : "")"
                             points="@GetPoints(row, column, "right")"
                             @onclick="@(() => GetTriangleCoordinates(row, column * 2))"
                             @onclick:stopPropagation="stopPropagation">
                                    <title>@GetReference(row, column * 2)</title>
                                </polygon>
                            }
                        }
                    </svg>
                    <hr />
                    <small>@StateGridService.Grid.Width x @StateGridService.Grid.Height grid, @StateGridService.Grid.GetRowCount() rows x @StateGridService.Grid.GetColumnCount() columns</small>
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    <strong>Unable to display grid</strong>

                    Please ensure your cell size is divisible by the height and width of the grid.
                </div>
            }
        </div>
        <div class="col-6">
            @if (isLoading)
            {
                <div>
                    <p>Fetching coordinates for @gridReference</p>
                </div>
            }
            else
            {
                <div>
                    <h2>Coordinates for {{ active }}</h2>

                    <ul>
                        <li v-for="triangleCoordinate in triangleCoordinates">X: {{ triangleCoordinate.x }}, Y: {{ triangleCoordinate.y }}</li>
                    </ul>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool stopPropagation = true;
    private string gridReference = string.Empty;
    private bool isLoading = true;
    private int scale = 5;

    protected override void OnInitialized()
    {
        StateGridService.OnChange += StateHasChanged;
    }

    private void CreateGrid()
    {
        StateGridService.Grid = new(60, 60, 10);
    }

    public void Dispose()
    {
        StateGridService.OnChange -= StateHasChanged;
    }

    private string GetReference(int row, int column) => $"{row}{(Char)(64 + column)}";

    private string GetPoints(int row, int column, string typeTriangle)
    {
        StringBuilder points = new();

        int point1X = (column - 1) * StateGridService.Grid.CellSize;
        int point1Y = (row - 1) * StateGridService.Grid.CellSize;

        int point2X = (typeTriangle.Equals("left") ? (column - 1) : column) * StateGridService.Grid.CellSize;
        int point2Y = (typeTriangle.Equals("right") ? (row - 1) : row) * StateGridService.Grid.CellSize;

        int point3X = column * StateGridService.Grid.CellSize;
        int point3Y = row * StateGridService.Grid.CellSize;

        points.Append(typeTriangle.Equals("left") ? $"{point1X * scale}, {point1Y * scale} {point2X * scale}, {point2Y * scale} {point3X * scale}, {point3Y * scale}" : $"{point1X * scale}, {point1Y * scale} {point2X * scale}, {point2Y * scale} {point3X * scale}, {point3Y * scale}");

        return points.ToString();
    }

    private void GetTriangleCoordinates(int row, int column)
    {
        gridReference = GetReference(row, column);
        isLoading = true;
    }
}